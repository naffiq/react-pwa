{"version":3,"sources":["components/UserCard.js","pages/Users.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","_ref","user","loading","react_default","a","createElement","Card","Placeholder","Image","square","src","avatar","width","height","Content","Header","Line","length","Paragraph","react","first_name","last_name","initUsers","localStorage","getItem","Users","state","users","JSON","parse","showInstallButton","deferredPrompt","beforeInstallPrompt","e","preventDefault","_this","setState","handleInstall","prompt","userChoice","then","choiceResult","outcome","console","log","_this2","this","fetch","response","json","usersResponse","setItem","stringify","data","window","addEventListener","removeEventListener","_this$state","Segment","className","Container","text","as","icon","textAlign","Icon","name","circular","Button","onClick","Group","doubling","itemsPerRow","stackable","Array","fill","map","ind","components_UserCard","key","concat","id","React","Component","App","BrowserRouter","Route","path","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8c99371c.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Placeholder, Image, Card } from \"semantic-ui-react\";\nconst UserCard = ({ user, loading }) => {\n  return (\n    <Card>\n      {loading ? (\n        <Placeholder>\n          <Placeholder.Image square />\n        </Placeholder>\n      ) : (\n        <Image src={user.avatar} width=\"100%\" height=\"auto\"/>\n      )}\n\n      <Card.Content>\n        {loading ? (\n          <Placeholder>\n            <Placeholder.Header>\n              <Placeholder.Line length=\"very short\" />\n              <Placeholder.Line length=\"medium\" />\n            </Placeholder.Header>\n            <Placeholder.Paragraph>\n              <Placeholder.Line length=\"short\" />\n            </Placeholder.Paragraph>\n          </Placeholder>\n        ) : (\n          <Fragment>\n            <Card.Header>\n              {user.first_name} {user.last_name}\n            </Card.Header>\n          </Fragment>\n        )}\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default UserCard;\n","import React from \"react\";\nimport { Container, Icon, Header, Segment, Card, Button } from \"semantic-ui-react\";\nimport UserCard from \"../components/UserCard\";\n\nconst initUsers = localStorage.getItem('users');\n\nclass Users extends React.Component {\n  state = {\n    users: initUsers ? JSON.parse(initUsers) : null,\n    showInstallButton: false\n  };\n  deferredPrompt = null;\n\n  componentDidMount() {\n    fetch(\"https://reqres.in/api/users\").then(response => {\n      response.json().then(usersResponse => {\n        localStorage.setItem('users', JSON.stringify(usersResponse.data));\n        console.log('users are stored', usersResponse.data)\n        this.setState({users: usersResponse.data});\n      });\n    });\n\n    window.addEventListener('beforeinstallprompt', this.beforeInstallPrompt);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('beforeinstallprompt', this.beforeInstallPrompt)\n  }\n\n  beforeInstallPrompt = (e) => {\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\n    e.preventDefault();\n    // Stash the event so it can be triggered later.\n    this.deferredPrompt = e;\n    this.setState({showInstallButton: true})\n  }\n\n  handleInstall = () => {\n    this.deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    this.deferredPrompt.userChoice\n      .then((choiceResult) => {\n        if (choiceResult.outcome === 'accepted') {\n          console.log('User accepted the A2HS prompt');\n        } else {\n          console.log('User dismissed the A2HS prompt');\n        }\n        this.deferredPrompt = null;\n      });\n  }\n\n  render() {\n    const {users, showInstallButton} = this.state;\n\n    return (\n      <Segment className=\"full-height\">\n        <Container text>\n          <br />\n          <Header as=\"h2\" icon textAlign=\"center\">\n            <Icon name=\"users\" circular />\n            <Header.Content>Users</Header.Content>\n\n            {showInstallButton && <Button onClick={this.handleInstall}>Install</Button>}\n          </Header>\n          <Card.Group doubling itemsPerRow={3} stackable>\n            {!users &&\n              new Array(3)\n                .fill(true)\n                .map((loading, ind) => (\n                  <UserCard\n                    loading={loading}\n                    user={false}\n                    key={`loading-${ind}`}\n                  />\n                ))}\n            {!!users && users.map(user => <UserCard user={user} key={user.id} />)}\n          </Card.Group>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default Users;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport Users from \"./pages/Users\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Route path=\"/\" component={Users} />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n\nlet deferredPrompt;\n\nwindow.addEventListener('beforeinstallprompt', (e) => {\n  // Prevent Chrome 67 and earlier from automatically showing the prompt\n  e.preventDefault();\n  // Stash the event so it can be triggered later.\n  deferredPrompt = e;\n});"],"sourceRoot":""}